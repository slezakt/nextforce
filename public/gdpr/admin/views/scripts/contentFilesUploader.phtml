<div class="reset">&nbsp;</div>
<?
    //ziskame maxfilesize pro dropzone
    $maxfilesize = intval(ini_get('upload_max_filesize'));
?>
<h3><?= $this->text('file_uploader.main.title') ?></h3>
<?= $this->fileUploader->getUploadForm() ?>
<script type="text/javascript">
    Dropzone.options.fileuploaderDropzone = { // The camelized version of the ID of the form element

        // The configuration we've talked about above
        autoProcessQueue: false,
        uploadMultiple: true,
        parallelUploads: 100,
        maxFiles: 100,
        maxFilesize: <?=$maxfilesize?>,
        addRemoveLinks: true,
        previewsContainer: ".dropzone-previews",
        clickable:  "#dropzone_add_files", 
        autoDiscover: false,
        dictDefaultMessage: "",
        fallback: function() {
           $('.dropzone-previews').css('display','none');
           $('#dropzone_add_files').css('display','none');
        },
        // The setting up of the dropzone
        init: function () {
            var myDropzone = this;

            // First change the button to actually tell Dropzone to process the queue.
            this.element.querySelector("#file_send").addEventListener("click", function (e) {
                // Make sure that the form isn't actually being sent.
                e.preventDefault();
                e.stopPropagation();
                myDropzone.processQueue();

            });

            // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
            // of the sending event because uploadMultiple is set to true.
            this.on("sendingmultiple", function () {
                // Gets triggered when the form is actually being sent.
                // Hide the success button or the complete form.
            });
            this.on("successmultiple", function (files, response) {
                // Gets triggered when the files have successfully been sent.
                // Redirect user or notify of success.
                 window.location.reload();
            });
            this.on("errormultiple", function (files, response) {
                // Gets triggered when there was an error sending the files.
                // Maybe show form again, and notify user of error
                window.location.reload();
            });
        }

    };
</script>